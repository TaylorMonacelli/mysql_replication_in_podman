#!/usr/bin/env bats

{% import "macros.j2" as macros with context %}
{%- set global=manifest['global'] %}
{%- set replication=manifest['replication'] %}
{%- set pods=manifest['pods'] %}

{{ macros.import_common_functions() }}

@test '{{ test_name }}' {





{{ macros.mysql_wait_for_replication() }}

podman exec --env=MYSQL_PWD=root {{ pods[0].containers[0].name }} mysql --user={{ global.user_root }} --host={{ pods[0].name }} --execute 'DROP DATABASE IF EXISTS ptest'

{{ macros.mysql_stop_slave() }}

{{ macros.mysql_create_database_ptest() }}

result=$(podman exec --env=MYSQL_PWD=root {{ pods[0].containers[0].name }} mysql --skip-column-names --user=root --host={{ pods[0].name }} --database=ptest --execute 'SELECT id FROM dummy WHERE name="a"')
[ "$result" == 1 ]

# ensure these fail
{%- for pod in pods %}
{% if not loop.first -%}
run podman exec --env=MYSQL_PWD={{ global.user_root_pass }} {{ pod.containers[0].name }} mysql --user={{ global.user_root }} --host={{ pod.name }}.dns.podman --execute 'USE ptest'
[ "$status" == 1 ]
{%- endif %}
{%- endfor %}

{{ macros.mysql_start_slave() }}

{{ macros.mysql_wait_for_replication() }}

{{ macros.mysql_check_ptest_exists_everywhere() }}





}

