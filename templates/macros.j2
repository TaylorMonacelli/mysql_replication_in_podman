{%- macro start_over() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{{ import_common_functions() }}
{{ podman_pull_images() }}

{{ podman_stop_containers() }}

{{ podman_stop_pods() }}

{{ podman_rm_containers() }}
{{ podman_rm_pods() }}

{{ podman_list_pods() }}

{{ podman_container_volume_setup() }}

{{ podman_create_network() }}

{{ mysql_conf_setup() }}

{{ podman_create_pods() }}

{{ podman_create_containers() }}
{{ podman_start_pods() }}

{{ mysql_start_replication() }}
{%- endmacro -%}

{%- macro delete_pods_and_containers() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}

{{ podman_stop_containers() }}
{{ podman_stop_pods() }}
{{ podman_rm_containers() }}
{{ podman_rm_pods() }}

{%- endmacro -%}

{%- macro podman_status() -%}
podman ps
podman ps --pod
podman ps -a --pod
podman network ls
podman volume ls
podman pod ls
{%- endmacro -%}

{%- macro mysql_jump() -%}
{%- set global=data['global'] -%}
{%- set pods=data['pods'] -%}
podman exec --env=MYSQL_PWD={{ global.user_root_pass }} {{ pods[0].containers[0].name }} mysql --user={{ global.user_root }}
{%- endmacro -%}

{%- macro mysql_start_replication() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{{ mysql_create_mysql_user_repl() }}

{{ mysql_change_master_to_master_host() }}

{{ mysql_start_slave() }}

{{ mysql_wait_for_replication() }}
{%- endmacro -%}

{%- macro repcheck_function() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
repcheck() {
    jump_container=$1
    target_host=$2

    result=$({{ mysql_jump() }} --host=$target_host --execute 'SHOW SLAVE STATUS\G')

    grep --silent 'Slave_IO_Running: Yes' <<<"$result"
    r1=$?

    grep --silent 'Slave_SQL_Running: Yes' <<<"$result"
    r2=$?

    [ $r1 -eq 0 ] && [ $r2 -eq 0 ]
}
{%- endmacro -%}

{%- macro mysql_wait_for_replication() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo mysql: wait for replication to be ready
sleep=2; tries=60
{%- for pod in pods %}
loop1 repcheck {{ pods[0].containers[0].name }} {{ pod.name }}.dns.podman $sleep $tries
{%- endfor %}
{%- endmacro -%}

{%- macro mysql_wait_for_replication1() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo mysql: wait for replication to be ready
{%- for pod in pods %}
result=$(podman exec --env=MYSQL_PWD="{{ global.user_root_pass }}" {{ pods[0].containers[0].name }} mysql --user={{ global.user_root }} --host={{ pod.name }}.dns.podman --execute 'SHOW SLAVE STATUS\G')
grep --silent 'Slave_IO_Running: Yes' <<<"$result"
r1=$?
grep --silent 'Slave_SQL_Running: Yes' <<<"$result"
r2=$?
[ $r1 -eq 0 ] && [ $r2 -eq 0 ]
{%- endfor %}
{%- endmacro -%}

{%- macro mysql_wait_for_replication2() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo mysql: wait for replication to be ready
{{ repcheck_function() }}
sleep=2; tries=60
{%- for pod in pods %}
loop1 repcheck {{ pods[0].containers[0].name }} {{ pod.name }}.dns.podman $sleep $tries
{%- endfor %}
{%- endmacro -%}

{%- macro mysql_data_load() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{{ import_common_functions() }}

cleanall

{{ podman_list_pods() }}

{{ podman_container_volume_setup() }}

{{ podman_create_network() }}

{{ mysql_conf_setup() }}

{{ podman_create_pods() }}

{{ podman_create_containers() }}

{{ podman_start_pods() }}

{{ mysql_start_replication() }}

cd ~/live_dbeval_comparing_records
{{ mysql_stop_slave() }}

echo mysql: data_load
time podman exec --env=MYSQL_PWD=rootpass my1c mysql --user=root --host=my1p.dns.podman --execute 'SOURCE /data/all_import.sql'
{%- endmacro -%}

{%- macro mysql_start_slave() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo mysql: start replication
{%- for pod in pods %}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'START SLAVE USER="{{ global.user_replication }}" PASSWORD="{{ global.user_replication_pass }}"'
{%- endfor -%}
{%- endmacro -%}

{%- macro mysql_show_master_status(host) -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{{ mysql_jump() }} --host={{ host }} --execute 'SHOW MASTER STATUS\G'
{%- endmacro -%}

{%- macro mysql_stop_slave() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo mysql: stop slave
{%- for pod in pods %}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'STOP SLAVE IO_THREAD FOR CHANNEL ""'
{%- endfor %}
{%- for pod in pods %}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'STOP SLAVE'
{%- endfor %}
{%- endmacro -%}

{%- macro mysql_change_master_to_master_host() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{{ mysql_stop_slave() }}

echo mysql: fetch positions
{% for block in replication %}
{%- set host = block.instance.pod ~ '.dns.podman' -%}
master_log_file=$(
  {{ mysql_show_master_status(host) }} | sed -e '/^ *File:/!d' -e 's/File://g' -e 's/ //g'
)
[[ ! -z "$master_log_file" ]] # assert not empty
position=$(
  {{ mysql_show_master_status(host) }} | sed -e '/^ *Position:/!d' -e 's/[^0-9]*//g'
)
{#- echo target:{{ block.instance.container }} source:{{ block.source.container }} position:$position #}
{{ mysql_show_master_status(host) }} 
{{ mysql_jump() }} --host={{ block.instance.pod }} --execute \
"CHANGE MASTER TO MASTER_HOST='{{ block.source.pod }}.dns.podman',MASTER_USER='{{ global.user_replication }}',\
MASTER_PASSWORD='{{ global.user_replication_pass }}',MASTER_LOG_FILE='"$master_log_file"',MASTER_LOG_POS=$position"
{%- endfor -%}
{%- endmacro -%}

{%- macro mysql_disable_replication() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{{ mysql_stop_slave() }}

echo mysql: disable replication 
{%- for block in replication %}
{{ mysql_jump() }} --host={{ block.instance.pod }} --execute 'RESET SLAVE ALL'
{%- endfor -%}

echo mysql: disable replication 
{%- for block in replication %}
{{ mysql_jump() }} --host={{ block.instance.pod }} --execute 'SHOW MASTER STATUS\G'
{%- endfor -%}
{%- endmacro -%}

{%- macro mysql_conf_setup() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
mkdir -p reptest

echo mysql: configure mysql service
{%- for pod in pods %}
cat <<'__eot__' >reptest/{{ pod.containers[0].name }}_my.cnf
[mysqld]
innodb_flush_log_at_trx_commit = 1 
sync_binlog                    = 1
server_id                      = {{ loop.index }}
auto_increment_offset          = {{ loop.index }}
binlog_format                  = ROW
default-storage-engine         = INNODB
;slave-skip-errors              = 1050,1062,1032
__eot__
{%- endfor %}

echo mysql: check mysql config
{%- for pod in pods %}
cat reptest/{{ pod.containers[0].name }}_my.cnf && echo
{%- endfor %}
{%- endmacro -%}

{%- macro podman_container_volume_setup() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo create volumes
{%- for pod in pods %}
podman volume exists {{ pod.volume }} || podman volume create {{ pod.volume }} >/dev/null
{%- endfor %}
{%- endmacro -%}

{%- macro podman_create_pods() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo create pods
{%- for pod in pods %}
podman pod exists {{ pod.name }} || podman pod create --name={{ pod.name }} --publish={{ global.internal_port }}{{loop.index}}:{{ global.internal_port }} --network={{ global.network }} >/dev/null
{%- endfor %}
{%- endmacro -%}

{%- macro podman_create_containers() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo create containers
mkdir -p /root/live_dbeval_comparing_records
{%- for pod in pods %}
if ! podman container exists {{ pod.containers[0].name }}
then
    podman container create \
        --name={{ pod.containers[0].name }} \
        --pod={{ pod.name }} \
        --log-driver=journald \
        --healthcheck-interval=0 \
        --health-retries=10 \
        --health-timeout=30s \
        --health-start-period=80s \
        --healthcheck-command 'CMD-SHELL mysql --user={{ global.user_root }} --password="{{ global.user_root_pass }}" --host={{ pod.name }} --execute "USE mysql" || exit 1' \
        --volume=/root/live_dbeval_comparing_records:/data \
        --volume=./reptest/{{ pod.containers[0].name }}_my.cnf:/etc/my.cnf.d/100-reptest.cnf \
        --volume={{ pod.volume }}:/var/lib/mysql/data:Z \
        --env=MYSQL_ROOT_PASSWORD={{ global.user_root_pass }} \
        --env=MYSQL_USER={{ global.user_non_root }} \
        --env=MYSQL_PASSWORD={{ global.user_non_root_pass }} \
        --env=MYSQL_DATABASE=db \
        registry.redhat.io/rhel8/mysql-80 >/dev/null
fi        
{%- endfor %}
if ! podman container exists dbeval
then
    podman container run \
        --rm \
        --detach \
        --name=dbeval \
        --pod=my1p \
        --volume=/root/live_dbeval_comparing_records:/data \
        --log-driver=journald \
        --healthcheck-interval=0 \
        --health-retries=10 \
        --health-timeout=30s \
        --health-start-period=80s \
        --healthcheck-command 'CMD-SHELL python --version | grep 3 || exit 1' \
        --env=MYSQL_ROOT_PASSWORD=rootpass \
        --env=MYSQL_USER=joe \
        --env=MYSQL_PASSWORD=joepass \
        localhost/dbeval:latest tail -f /dev/null >/dev/null 
fi
{%- endmacro -%}

{%- macro remove_mysql_data_but_keep_container_volume() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}

echo remove data from volume, but leaving volume in place
{%- for pod in pods %}
path=$(podman volume inspect {{ pod.volume }} | jq -r '.[]|.Mountpoint'); rm -rf --preserve-root ${path:?"path is empty string"}/*
{%- endfor %}

echo check data directory is cleaned out
{%- for pod in pods %}
size=$(du -s $(podman volume inspect {{ pod.volume }} | jq -r '.[]|.Mountpoint')/ | awk '{print $1}')
size_friendly=$(du -sh $(podman volume inspect {{ pod.volume }} | jq -r '.[]|.Mountpoint')/ | awk '{print $1}')
[[ $size -le 8 ]]
echo {{ pod.volume }}:$size_friendly
{%- endfor -%}
{%- endmacro -%}

{%- macro podman_start_pods() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
set +o errexit
podman pod start {{ pods |map(attribute='name') |join(' ') }} 2>podman_start_pods_$(date +%s).log >/dev/null
set -o errexit
podman pod start {{ pods |map(attribute='name') |join(' ') }} >/dev/null

{{ healthcheck() }}

{{ assert_mysql_data_volume_size() }}
{%- endmacro -%}

{%- macro podman_list_pods() -%}
{# newline #}
podman pod ls
{%- endmacro -%}

{%- macro podman_create_network() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
if ! podman network exists {{ global.network}}
then
     echo creating network {{ global.network}}
     podman network create {{ global.network }} >/dev/null
fi
{%- endmacro -%}

{%- macro podman_stop_pods() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo stopping pods
{%- for pod in pods %}
podman pod exists {{ pod.name }} && podman pod stop {{ pod.name }} --ignore {{ pod.name }} >/dev/null
{%- endfor -%}
{%- endmacro -%}

{%- macro podman_rm_pods() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
set +o errexit
{%- for pod in pods %}
podman pod exists {{ pod.name }} && podman pod rm --force {{ pod.name }} --ignore {{ pod.name }} 2>podman_rm_pods.log >/dev/null
{%- endfor %}
set -o errexit
{% for pod in pods %}
podman pod exists {{ pod.name }} && podman pod rm --force {{ pod.name }} --ignore {{ pod.name }} >/dev/null
{%- endfor %}
{%- endmacro -%}

{%- macro podman_pull_images() -%}
! grep --quiet --regexp 'registry.redhat.io/rhel8/mysql-80.*latest' <<<"$(podman images)" && time podman pull --quiet registry.redhat.io/rhel8/mysql-80 >/dev/null
! grep --quiet --regexp 'docker.io/perconalab/percona-toolkit.*latest' <<<"$(podman images)" && time podman pull --quiet docker.io/perconalab/percona-toolkit:latest >/dev/null
! grep --quiet --regexp 'docker.io/library/python.*bullseye' <<<"$(podman images)" && time podman pull --quiet docker.io/library/python:bullseye >/dev/null
{%- endmacro -%}

{%- macro containers_as_single_line() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{%- for lst in pods | map(attribute="containers") -%}
    {{ lst[0]['name'] }}{{ ' ' if not loop.last }}
{%- endfor %}
{%- endmacro -%}

{%- macro podman_stop_containers() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
echo stopping containers
set +o errexit
podman container stop --ignore {{ containers_as_single_line() }} 2>&1 | grep -v 'Error: no container with name or ID ' >podman_stop_containers_$(date +%s).log
set -o errexit
{%- for pod in pods %}
podman container exists {{ pod.containers[0].name }} && podman container stop --ignore {{ pod.containers[0].name }} 2>&1 | grep -v 'Error: no container with name or ID '
{%- endfor %}
podman container wait --condition=stopped {{ containers_as_single_line() }} || true
{%- endmacro -%}

{%- macro podman_rm_containers() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
{%- for pod in pods %}
podman container exists {{ pod.containers[0].name }} && podman container rm --force --ignore {{ pod.containers[0].name }} >/dev/null
{%- endfor %}
{%- endmacro -%}

{%- macro healthcheck() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
echo 'wait for container healthcheck(s)'
sleep=4
tries=20
{%- for pod in pods %}
loop2 healthcheck {{ pod.containers[0].name }} $sleep $tries
{%- endfor %}
{%- endmacro -%}

{%- macro mysql_create_db_on_host(db, host) -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] -%}
{%- set pods=data['pods'] -%}
{{ mysql_jump() }} --host={{ host }} --execute 'CREATE DATABASE IF NOT EXISTS {{ db }}'
{{ mysql_jump() }} --database={{ db }} --host={{ host }} --execute 'CREATE TABLE dummy (id INT(11) NOT NULL auto_increment PRIMARY KEY, name CHAR(5)) engine=innodb;'
{{ mysql_jump() }} --database={{ db }} --host={{ host }} --execute 'INSERT INTO dummy (name) VALUES ("a"), ("b")'
{%- endmacro -%}

{%- macro percona_checksum() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
# disabled for now.  django complains about using binlog_format=STATEMENT and pt-table-checksum complains about using binlog_format=ROW from https://bit.ly/3zL5Zxx
{% for pod in pods %}
# podman run --pod={{ pods[0].name }} --env=PTDEBUG=0 --env=MYSQL_PWD={{ global.user_root_pass }} percona-toolkit pt-table-checksum --replicate=percona.checksums --ignore-databases=sys,mysql h={{ pod.name }}.dns.podman,u={{ global.user_root }},p={{ global.user_root_pass }},P=3306
{%- endfor %}
{%- endmacro -%}

{%- macro bats_test_mysql_check_db_exists_everywhere(db) -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
{%- for pod in pods %}
run {{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'USE {{ db }}'
[ "$status" == 0 ]
{%- endfor %}
{%- endmacro -%}

{%- macro bats_test_mysql_check_ptest1_does_not_exist() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
{%- for pod in pods %}
run {{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'USE ptest1'
[ "$status" -ne 0 ]
{%- endfor %}
{%- endmacro -%}

{%- macro bats_test_test_can_connect_to_mysql_db() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
{%- for pod in pods %}
run {{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'USE mysql'
[ "$status" == 0 ]
{%- endfor %}
{%- endmacro -%}

{%- macro mysql_create_mysql_user_repl() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}

echo mysql: add and grant user {{ global.user_replication }}
{% for pod in pods %}
{%- set user = "`" ~ global.user_replication ~ "`" ~ "@" ~ '"' ~ '%' ~ '"' -%}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'CREATE USER IF NOT EXISTS {{ user }} IDENTIFIED WITH mysql_native_password BY "{{ global.user_replication_pass }}"'
{% endfor %}
{%- for pod in pods %}
{%- set user = "`" ~ global.user_replication ~ "`" ~ "@" ~ '"' ~ '%' ~ '"' -%}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'GRANT REPLICATION SLAVE ON *.* TO {{ user }}'
{% endfor %}

echo mysql: add and grant user {{ global.user_percona }}
{% for pod in pods %}
{%- set user = "`" ~ global.user_percona ~ "`" ~ "@" ~ '"' ~ '%' ~ '"' -%}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'CREATE USER IF NOT EXISTS {{ user }} IDENTIFIED WITH mysql_native_password BY "{{ global.user_percona_pass }}"'
{% endfor %}
{%- for pod in pods %}
{%- set user = "`" ~ global.user_percona ~ "`" ~ "@" ~ '"' ~ '%' ~ '"' -%}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'GRANT REPLICATION SLAVE,PROCESS,SUPER,SELECT ON *.* TO {{ user }}'
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'GRANT ALL PRIVILEGES ON percona.* TO {{ user }}'
{% endfor %}

echo mysql: flush privileges
{%- for pod in pods %}
{{ mysql_jump() }} --host={{ pod.name }}.dns.podman --execute 'FLUSH PRIVILEGES'
{%- endfor -%}
{%- endmacro -%}

{%- macro import_common_functions() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
cleanall() {
    for i in {1..2}; do
        podman pod stop --ignore --all
        podman container stop --ignore --all
        podman pod rm --all --force
        podman container rm --all --force
        podman images prune
        podman volume rm --all --force
        for network in $(podman network ls --format json | jq -r '.[].Name'); do
            if [[ $network != "podman" ]]; then
                podman network exists $network && podman network rm $network
            fi
        done
    done

    podman ps
    podman ps --pod
    podman ps -a --pod
    podman network ls
    podman volume ls
    podman pod ls
}

{{ repcheck_function() }}


loop2() {
    func=$1
    container=$2
    sleep=$3
    maxcalls=$4

    count=1
    while ! ($func $container); do
        echo trying $func... $count
        sleep $sleep
        let count+=1

        if [[ $count -ge $maxcalls ]]; then
            return 1
        fi
    done
}

loop1() {
    func=$1
    jump_container=$2
    target_host=$3
    sleep=$4
    maxcalls=$5

    count=1
    while ! ($func $jump_container $target_host); do
        echo trying $func... $count
        sleep $sleep
        let count+=1

        if [[ $count -ge $maxcalls ]]; then
            return 1
        fi
    done
}

healthcheck() {
    container=$1

    podman healthcheck run $container </dev/null
    r1=$?

    [ $r1 -eq 0 ]
}
{%- endmacro -%}

{%- macro assert_mysql_data_volume_size() -%}
{%- set global=data['global'] -%}
{%- set replication=data['replication'] %}
{%- set pods=data['pods'] -%}
echo 'check data directory is larger than 80MB, ~97MB is expected size'
{%- for pod in pods %}
size=$(du -s $(podman volume inspect {{ pod.volume }} | jq -r '.[]|.Mountpoint')/ |awk '{print $1}')
[[ $size -gt 80000 ]]
{%- endfor %}
{%- endmacro -%}
